# Generated by Django 2.2.3 on 2019-08-02 05:16

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('unit', models.CharField(max_length=50)),
                ('min', models.FloatField(blank=True, default=None, null=True)),
                ('max', models.FloatField(blank=True, default=None, null=True)),
                ('values', models.BooleanField(default=True)),
                ('tot', models.BooleanField(default=False)),
                ('activeFrom', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='VintageRating',
            fields=[
                ('year', models.IntegerField(primary_key=True, serialize=False)),
                ('rating', models.FloatField(validators=[django.core.validators.MaxValueValidator(5.0),
                                                         django.core.validators.MinValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='WeatherHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.IntegerField()),
                ('icon', models.CharField(max_length=200)),
                ('summary', models.CharField(max_length=200)),
                ('precipitationType', models.CharField(max_length=200)),
                ('precipitationIntensity', models.FloatField()),
                ('precipitationIntensityMax', models.FloatField()),
                ('precipitationIntensityMaxTime', models.IntegerField()),
                ('precipitationProbability', models.FloatField()),
                ('precipitationAccumulation', models.FloatField()),
                ('uvIndex', models.IntegerField()),
                ('uvIndexTime', models.IntegerField()),
                ('sunriseTime', models.IntegerField()),
                ('sunsetTime', models.IntegerField()),
                ('temperatureMax', models.FloatField()),
                ('temperatureMin', models.FloatField()),
                ('apparentTemperatureMax', models.FloatField()),
                ('apparentTemperatureMin', models.FloatField()),
                ('windBearing', models.IntegerField()),
                ('apparentTemperatureMaxTime', models.IntegerField()),
                ('apparentTemperatureMinTime', models.IntegerField()),
                ('temperatureMinTime', models.IntegerField()),
                ('temperatureMaxTime', models.IntegerField()),
                ('humidity', models.FloatField()),
                ('cloudCover', models.FloatField()),
                ('dewPoint', models.FloatField()),
                ('windSpeed', models.FloatField()),
                ('moonPhase', models.FloatField()),
                ('pressure', models.FloatField()),
                ('visibility', models.FloatField()),
                ('temperatureHigh', models.FloatField()),
                ('temperatureLow', models.FloatField()),
                ('temperatureHighTime', models.IntegerField()),
                ('temperatureLowTime', models.IntegerField()),
                ('apparentTemperatureHigh', models.FloatField()),
                ('apparentTemperatureLow', models.FloatField()),
                ('apparentTemperatureHighTime', models.IntegerField()),
                ('apparentTemperatureLowTime', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='RealTimeData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('value', models.FloatField()),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WineApp.Sensor')),
            ],
            options={
                'unique_together': {('time', 'sensor')},
            },
        ),
        migrations.CreateModel(
            name='DailyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('avg', models.FloatField(blank=True, default=None, null=True)),
                ('min', models.FloatField(blank=True, default=None, null=True)),
                ('max', models.FloatField(blank=True, default=None, null=True)),
                ('minTime', models.TimeField(blank=True, default=None, null=True)),
                ('maxTime', models.TimeField(blank=True, default=None, null=True)),
                ('tot', models.FloatField(blank=True, default=None, null=True)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WineApp.Sensor')),
            ],
            options={
                'unique_together': {('date', 'sensor')},
            },
        ),
    ]
